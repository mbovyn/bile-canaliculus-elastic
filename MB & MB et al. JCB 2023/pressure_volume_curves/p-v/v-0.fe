//bc_param_v2.geom
//parameterized bc from measurements as of May 25

//preamblehere
define facet attribute youngs real
define facet attribute poisson_ratio real
define facet attribute form_factors real[3]
define facet attribute rest_area real

define center real[3]

method_instance linlastic method linear_elastic element_modulus youngs
quantity linlasticE energy function linlastic.value

vertices
1  0. 0. 0.
2  0. 0. 1.
3  0. 0.488889 0.
4  0. 0.488889 1.
5  0. 0.977778 0.
6  0. 0.977778 1.
7  0. 1.46667 0.
8  0. 1.46667 1.
9  0. 1.95556 0.
10  0. 1.95556 1.
11  0. 2.44444 0.
12  0. 2.44444 1.
13  0. 2.93333 0.
14  0. 2.93333 1.
15  0. 3.42222 0.
16  0. 3.42222 1.
17  0. 3.91111 0.
18  0. 3.91111 1.
19  0. 4.4 0.
20  0. 4.4 1.
21  0. 4.88889 0.
22  0. 4.88889 1.
23  0.25 0. 0.
24  0.25 0. 1.
25  0.25 0.488889 0.
26  0.25 0.488889 1.
27  0.25 0.977778 0.
28  0.25 0.977778 1.
29  0.25 1.46667 0.
30  0.25 1.46667 1.
31  0.25 1.95556 0.
32  0.25 1.95556 1.
33  0.25 2.44444 0.
34  0.25 2.44444 1.
35  0.25 2.93333 0.
36  0.25 2.93333 1.
37  0.25 3.42222 0.
38  0.25 3.42222 1.
39  0.25 3.91111 0.
40  0.25 3.91111 1.
41  0.25 4.4 0.
42  0.25 4.4 1.
43  0.25 4.88889 0.
44  0.25 4.88889 1.
45  0. 0. 0.5
46  0.25 0. 0.5
47  0. 0.488889 0.5
48  0.25 0.488889 0.5
49  0. 0.977778 0.5
50  0.25 0.977778 0.5
51  0. 1.46667 0.5
52  0.25 1.46667 0.5
53  0. 1.95556 0.5
54  0.25 1.95556 0.5
55  0. 2.44444 0.5
56  0.25 2.44444 0.5
57  0. 2.93333 0.5
58  0.25 2.93333 0.5
59  0. 3.42222 0.5
60  0.25 3.42222 0.5
61  0. 3.91111 0.5
62  0.25 3.91111 0.5
63  0. 4.4 0.5
64  0.25 4.4 0.5
65  0. 4.88889 0.5
66  0.25 4.88889 0.5

edges
2  1 3
3  1 23
4  1 45
5  2 4
6  2 24
7  2 45
9  3 5
10  3 25
11  3 47
12  4 6
13  4 26
14  4 47
16  5 7
17  5 27
18  5 49
19  6 8
20  6 28
21  6 49
23  7 9
24  7 29
25  7 51
26  8 10
27  8 30
28  8 51
30  9 11
31  9 31
32  9 53
33  10 12
34  10 32
35  10 53
37  11 13
38  11 33
39  11 55
40  12 14
41  12 34
42  12 55
44  13 15
45  13 35
46  13 57
47  14 16
48  14 36
49  14 57
51  15 17
52  15 37
53  15 59
54  16 18
55  16 38
56  16 59
58  17 19
59  17 39
60  17 61
61  18 20
62  18 40
63  18 61
65  19 21
66  19 41
67  19 63
68  20 22
69  20 42
70  20 63
72  21 43
73  21 65
74  22 44
75  22 65
77  23 25
78  23 46
79  24 26
80  24 46
82  25 27
83  25 48
84  26 28
85  26 48
87  27 29
88  27 50
89  28 30
90  28 50
92  29 31
93  29 52
94  30 32
95  30 52
97  31 33
98  31 54
99  32 34
100  32 54
102  33 35
103  33 56
104  34 36
105  34 56
107  35 37
108  35 58
109  36 38
110  36 58
112  37 39
113  37 60
114  38 40
115  38 60
117  39 41
118  39 62
119  40 42
120  40 62
122  41 43
123  41 64
124  42 44
125  42 64
127  43 66
128  44 66
129  45 46
130  45 47
131  46 48
132  47 48
133  47 49
134  48 50
135  49 50
136  49 51
137  50 52
138  51 52
139  51 53
140  52 54
141  53 54
142  53 55
143  54 56
144  55 56
145  55 57
146  56 58
147  57 58
148  57 59
149  58 60
150  59 60
151  59 61
152  60 62
153  61 62
154  61 63
155  62 64
156  63 64
157  63 65
158  64 66
159  65 66

faces
1  3 77 -10 -2 youngs 1
2  10 82 -17 -9 youngs 1
3  17 87 -24 -16 youngs 1
4  24 92 -31 -23 youngs 1
5  31 97 -38 -30 youngs 1
6  38 102 -45 -37 youngs 1
7  45 107 -52 -44 youngs 1
8  52 112 -59 -51 youngs 1
9  59 117 -66 -58 youngs 1
10  66 122 -72 -65 youngs 1
11  5 13 -79 -6 youngs 1
12  12 20 -84 -13 youngs 1
13  19 27 -89 -20 youngs 1
14  26 34 -94 -27 youngs 1
15  33 41 -99 -34 youngs 1
16  40 48 -104 -41 youngs 1
17  47 55 -109 -48 youngs 1
18  54 62 -114 -55 youngs 1
19  61 69 -119 -62 youngs 1
20  68 74 -124 -69 youngs 1
21  6 80 -129 -7 youngs 1
22  4 129 -78 -3 youngs 1
23  75 159 -128 -74 youngs 1
24  72 127 -159 -73 youngs 1
25  7 130 -14 -5 youngs 1
26  14 133 -21 -12 youngs 1
27  21 136 -28 -19 youngs 1
28  28 139 -35 -26 youngs 1
29  35 142 -42 -33 youngs 1
30  42 145 -49 -40 youngs 1
31  49 148 -56 -47 youngs 1
32  56 151 -63 -54 youngs 1
33  63 154 -70 -61 youngs 1
34  70 157 -75 -68 youngs 1
35  2 11 -130 -4 youngs 1
36  9 18 -133 -11 youngs 1
37  16 25 -136 -18 youngs 1
38  23 32 -139 -25 youngs 1
39  30 39 -142 -32 youngs 1
40  37 46 -145 -39 youngs 1
41  44 53 -148 -46 youngs 1
42  51 60 -151 -53 youngs 1
43  58 67 -154 -60 youngs 1
44  65 73 -157 -67 youngs 1
45  79 85 -131 -80 youngs 1
46  84 90 -134 -85 youngs 1
47  89 95 -137 -90 youngs 1
48  94 100 -140 -95 youngs 1
49  99 105 -143 -100 youngs 1
50  104 110 -146 -105 youngs 1
51  109 115 -149 -110 youngs 1
52  114 120 -152 -115 youngs 1
53  119 125 -155 -120 youngs 1
54  124 128 -158 -125 youngs 1
55  78 131 -83 -77 youngs 1
56  83 134 -88 -82 youngs 1
57  88 137 -93 -87 youngs 1
58  93 140 -98 -92 youngs 1
59  98 143 -103 -97 youngs 1
60  103 146 -108 -102 youngs 1
61  108 149 -113 -107 youngs 1
62  113 152 -118 -112 youngs 1
63  118 155 -123 -117 youngs 1
64  123 158 -127 -122 youngs 1
65  13 85 -132 -14 youngs 1 tension 0
66  27 95 -138 -28 youngs 1 tension 0
67  41 105 -144 -42 youngs 1 tension 0
68  55 115 -150 -56 youngs 1 tension 0
69  69 125 -156 -70 youngs 1 tension 0
70  18 135 -88 -17 youngs 1 tension 0
71  32 141 -98 -31 youngs 1 tension 0
72  46 147 -108 -45 youngs 1 tension 0
73  60 153 -118 -59 youngs 1 tension 0

bodies
1   -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20 -21 -22 -23 -24 -25 -26 -27 -28 -29 -30 -31 -32 -33 -34 -35 -36 -37 -38 -39 -40 -41 -42 -43 -44 -45 -46 -47 -48 -49 -50 -51 -52 -53 -54 -55 -56 -57 -58 -59 -60 -61 -62 -63 -64

read

//params for end rounding
er:=4.88889
el:=0
arad:=.5
brad:=0.366667

//mark bulkheads green
mark_bulkheads:={
  foreach facet ff do {
    if (ff.original>64) then {
      ff.color:=green;
    };
  };
}
mark_bulkheads




//measured values

v_add:=1.77; //correct for measured rest width (sets rest volume)

bulkheadyoungs_meas:=.5; //Corresponds to measured value
junctionyoungs_meas:=2.5; //Corresponds to measured value

v_deformed:=4.4; //Corresponds to measured value
p_deformed:=.72644; //Corresponds to measured values

//set these initially, can be changed later
bulkheadyoungs:=bulkheadyoungs_meas;
junctionyoungs:=junctionyoungs_meas;
cortexyoungs:=1;


nickdepth:=.8
nickw:=1/3.6
nick_ablate:=1
nickc:=.1255
bbmin:=999
bbmax:=-999

ablation_oid:=68


//initial setup --------------------------------------------------------------


//refine initial rectangular prism
ref_init:={
  bodies[1].target:=bodies[1].volume;
  r;
  r;
  u;
}

//round ends
round:=
{
  foreach vertex vv do
  {
    if vv.y > er-brad then
    {
      yn:=((vv.z-.5)**2/((vv.y-(er-brad))**2 * arad**2) + 1/brad**2)**-.5;
      zn:=(vv.z-.5)*yn/(vv.y-(er-brad));
      vv.y:=yn+(er-brad);
      vv.z:=zn+.5;
    }
    else if vv.y < brad then
    {
      yn:=((vv.z-.5)**2/((vv.y-(brad))**2 * arad**2) + 1/brad**2)**-.5;
      zn:=(vv.z-.5)*yn/(vv.y-brad);
      vv.y:=-yn+brad;
      vv.z:=-zn+.5;
    }
  };
}

//even out altered facets
ii:=0;
massage:={
  ii:=0;
  while ii<30 do {
    foreach vertex vv do {
      bv:=1;
      foreach vv.facet ff do if ff.color==green then bv:=0;
      if bv==1 then {
          vertex_average vv;
        };
      };
    ii+=1;
  };
  //V 30;
  //u 2;
  refine facets where color==green;
  u;
}

//do initial setup
setup:={
  ref_init;
  round;
  massage;
}




//evolve to rest shape

fff:=1
bff:=1
set_ff:=
{
  foreach facet ff do
    { if ff.color==green then fff:=bff;
      set ff.form_factors[1]
          (
            fff*(ff.vertex[2].x - ff.vertex[1].x)^2
          + (ff.vertex[2].y - ff.vertex[1].y)^2
          + (ff.vertex[2].z - ff.vertex[1].z)^2);
      set ff.form_factors[2]
          (
            fff*(ff.vertex[2].x - ff.vertex[1].x)
           *(ff.vertex[3].x - ff.vertex[1].x)
          + (ff.vertex[2].y - ff.vertex[1].y)
           *(ff.vertex[3].y - ff.vertex[1].y)
          + (ff.vertex[2].z - ff.vertex[1].z)
           *(ff.vertex[3].z - ff.vertex[1].z));
      set ff.form_factors[3]
          (
            fff*(ff.vertex[3].x - ff.vertex[1].x)^2
          + (ff.vertex[3].y - ff.vertex[1].y)^2
          + (ff.vertex[3].z - ff.vertex[1].z)^2);

      set ff poisson_ratio 0.5;
      set ff rest_area ff.area;
      fff:=1;
    };
}

set_bulkhead := {
  foreach facet ff do
  {
    if ff.color == green then {
      ff.youngs:=bulkheadyoungs;
    };
  };
}

set_junction:={
  foreach facet ff do
  {
    ii:=1;
    while ii<4 do {
      if ff.vertex[ii].x>.10 && ff.vertex[ii].x<.15 && ff.color!=green then {
        ff.color:=red;
        ff.youngs:=junctionyoungs;
      };
      ii:=ii+1;
    };
  };
}

bulkheadyoungs_set:=1
gotorest:={
  //set elastic
  set facet tension 0;
  g10;
  set facet method_instance linlastic;
  set_ff;
  //make bulkheads very weak
  bulkheadyoungs_set:=bulkheadyoungs;
  bulkheadyoungs:=.0001;
  cortexyoungs:=1;
  set_bulkhead;
  //evolve to increased volume
  //more volume added -> more round (x-z slice)
  bodies[1].target:=bodies[1].volume+v_add;
  //conj_grad;
  g150;
  rest_vol:=bodies[1].volume;
  bulkheadyoungs:=bulkheadyoungs_set;
}

refine_bulkheads:={
  l .2;
  ii:=1;
  while ii<20 do {
    foreach vertex vv do {
      bv:=0;
      foreach vv.facet ff do if ff.color==green then bv:=1;
      foreach vv.edge ee do if ee.valence==1 then bv:=0;
      if bv==1 then {
          vertex_average vv;
        };
      };
    ii+=1;
  };
  refine facet where color==green;

  //refine facets where original==ablation_oid;
  // while ii<20 do {
  //   foreach vertex vv do {
  //     bv:=0;
  //     foreach vv.facet ff do if ff.original==ablation_oid then bv:=1;
  //     foreach vv.edge ee do if ee.valence==1 then bv:=0;
  //     if bv==1 then {
  //         vertex_average vv;
  //       };
  //     };
  //   ii+=1;
  // };
  u;
  if nick_ablate then {
    refine facets where original==ablation_oid;
    u;
  };
  //refine facets where original==ablation_oid;
  //u;
}


// record size


getmax:=
{
  maxb:=-999;
  minb:=999;
  maxx:=-999;
  minx:=999;
  maxy:=-999;
  miny:=999;
  maxz:=-999;
  minz:=999;
  foreach vertex vv do
  {
    if vv.x>maxx then maxx:=vv.x;
    if vv.x<minx then minx:=vv.x;
    if vv.y>maxy then maxy:=vv.y;
    if vv.y<miny then miny:=vv.y;
    if vv.z>maxz then maxz:=vv.z;
    if vv.z<minz then minz:=vv.z;
    foreach vv.facets ff do {
      if (ff.color == green) then {
        if vv.x>maxb then maxb:=vv.x;
        if vv.x<minb then minb:=vv.x;
      };
    };
  };
  //print minx;
  //print maxx;
  //print maxb;
}

get_sums:={
  ftot:=0;
  ratot:=0;
  datot:=0;
  actot:=0;
  foreach facet ff do { if ff.color!=red then {
    ftot+=ff.youngs*(ff.area-ff.rest_area);
    ratot+=ff.rest_area;
    datot+=ff.area;
    actot+=ff.rest_area*ff.youngs;
  };};
  tavg:=ftot/datot;
}

fname:="Error!.txt"
headerprinted:=0
print_to_file :=
{
  if !headerprinted then {
    printf "p,v,maxx,maxy,maxz,maxb,v_add,bulkheadyoungs,cortexyoungs,junctionyoungs,ftot,ratot,datot,actot,tavg\n" >>> fname;
    headerprinted:=1;
  };
  printf "%g,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g\n",bodies[1].pressure,bodies[1].volume,
    maxx-minx,
    maxy-miny,
    maxz-minz,
    maxb-minb,
    v_add,
    bulkheadyoungs,
    cortexyoungs,
    junctionyoungs,
    ftot,
    ratot,
    datot,
    actot,
    tavg
     >> fname;
}




// Inflate to deformed shape




vt:=1
gotov:={
  unset bodies[1].pressure;
  bodies[1].target:=vt;
  conj_grad;
  g750;
}


set_rest:={
  refine_bulkheads;
  //set the current shape as the rest shape
  set_ff;
  g10;
  //set the moduli
  set_bulkhead;
  set_junction;
}


gotodeformed:={
  set_rest;
  vt:=v_deformed;
  gotov;
}




//Expand to measure p-V curve


set_cortex:={
  foreach facet ff do
  {
    if ff.color == white then ff.youngs:=cortexyoungs;
  }
}

pt:=1
gotop:={
  unset bodies[1].target;
  bodies[1].pressure:=pt;
  conj_grad;
  g1000;
}

c_add:=1
cxpand:={
  conj_grad;
  ii:=1;
  print_to_file;
  while ii<6 do {
    cortexyoungs+=c_add;
    set_cortex;
    g500;
    print_to_file;
    ii:=ii+1;
  };
}




// Estimates for area, force


p_add:=.1
pxpand:={
  conj_grad;
  ii:=1;
  while ii<10 do {
    bodies[1].pressure+=p_add;
    g1000;
    getmax;
    get_sums;
    print_to_file;
    ii:=ii+1;
  };
}

facetfname:="facets.txt"
vertexfname:="vertices.txt"
dump_info:={
  printf "id,area,youngs,cenx,ceny,cenz,v1x,v1y,v1z,v2x,v2y,v2z\n" >>> facetfname;
  foreach facet ff do {
    ii:=0;
    foreach ff.vertex vv do {
      jj:=1;
      while jj<4 do {
        center[jj]+=vv.x[jj];
        jj+=1;
      };
      ii+=1;
    };
    jj:=1;
    while jj<4 do {
      center[jj]:=center[jj]/ii;
      jj+=1;
    };
    printf "%d,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g\n",
      ff.id,
      ff.area,
      ff.youngs,
      center[1],
      center[2],
      center[3],
      ff.vertex[2].x-ff.vertex[1].x,
      ff.vertex[2].y-ff.vertex[1].y,
      ff.vertex[2].z-ff.vertex[1].z,
      ff.vertex[3].x-ff.vertex[1].x,
      ff.vertex[3].y-ff.vertex[1].y,
      ff.vertex[3].z-ff.vertex[1].z
       >> facetfname;
  };
}


ablated:=0
remove_bulkhead:={
  foreach facet ff do {
    if ff.original==ablation_oid then {
      ff.color:=blue;
      ff.youngs:=.001;
      ablated:=1;
    };
  };
}

return_bulkhead:={
  foreach facet ff do {
    if ff.original==ablation_oid then {
      ff.color:=green;
      ff.youngs:=bulkheadyoungs;
      ablated:=0;
    };
  };
}

expand_header_printed:=0
fname_expand:="error_expand.txt"
find_outerb:={
  if !expand_header_printed then {
    printf "id,x,y,z,ablated,v,bulkheadyoungs,nickdepth,nickw,nickc,bbmin\n" >>> fname_expand;
    expand_header_printed:=1;
  };
  foreach facet ff do {
    if ff.original==ablation_oid then {
      foreach ff.edges ee do {
        if ee.valence==3 then {
          foreach ee.vertex vv do {
            printf "%d,%g,%g,%g,%d,%g,%g,%g,%g,%g,%g\n",vv.id,vv.x[1],vv.x[2],vv.x[3],ablated,bodies[1].volume,bulkheadyoungs,nickdepth,nickw,nickc,bbmin >> fname_expand;
          };
        };
      };
    };
  };
}



make_equiv:={
  cortex_equiv:=1.64;
  cortexyoungs:=cortex_equiv;
  set_cortex;
  bulkheadyoungs:=0;
  set_bulkhead;
  foreach facet ff do {
    if ff.color==green then {
      set ff nodisplay;
    };
    if ff.color==white then {
      ff.color:=yellow;
    };
  };
  gotop;
}



//bottom .65, top 1
nickl:=.05
nickr:=.2
//min: .125-.126


bcen:=0
bn:=0
ibb:=1
find_bb:={
  bbmin:=999;
  bbmax:=-999;
  bcen:=0;
  bn:=0;
  foreach facet ff do
  {
    ibb:=1;
    while ibb<4 do {
      if ff.color==green && ff.original==ablation_oid then {
        if ff.vertex[ibb].x>-.035 && ff.vertex[ibb].x<.28 then {
          if ff.vertex[ibb].z>bbmax then bbmax:=ff.vertex[ibb].z;
          if ff.vertex[ibb].z<bbmin then bbmin:=ff.vertex[ibb].z;
        };
        bcen+=ff.vertex[ibb].x;
        bn+=1;
      };
      ibb:=ibb+1;
    };
  };
  bcen:=bcen/bn;
  nickc:=bcen;
}

//max width at rest shape: 1.18/3.6
setnick:={
  find_bb;
  nickl:=nickc-nickw/2;
  nickr:=nickc+nickw/2;
  nickdepth:=bbmin+nickw*1.5;
}

in:=1
nick:={
  foreach facet ff do
  {
    in:=1;
    while in<4 do {
      if ff.vertex[in].x>nickc+(nickw/2/(nickdepth-bbmin))*(ff.vertex[in].z-nickdepth) &&
      ff.vertex[in].x<nickc+(-nickw/2/(nickdepth-bbmin))*(ff.vertex[in].z-nickdepth) &&
      ff.color==green && ff.original==ablation_oid && ff.vertex[in].z<nickdepth then {
        ff.color:=blue;
        ff.youngs:=.001;
      };
      in:=in+1;
    };
  };
  ablated:=1;
}

nicksq:={
  foreach facet ff do
  {
    in:=1;
    while in<4 do {
      if ff.vertex[ii].x>nickl &&
      ff.vertex[ii].x<nickr &&
      ff.color==green && ff.original==ablation_oid && ff.vertex[ii].z<nickdepth then {
        ff.color:=blue;
        ff.youngs:=.001;
      };
      in:=in+1;
    };
  };
  ablated:=1;
}


ablate_bulkhead:={
  if nick_ablate then {
    setnick;
    find_outerb;
    nick;
  } else {
    find_outerb;
    remove_bulkhead;
  };
  g1000;
  find_outerb;
}

v_exp:=.25
also_ablate:=0
ie:=1
expand:={
  unset bodies[1].pressure;
  conj_grad;
  ie:=1;
  while ie<12 do {
    bodies[1].target+=v_exp;
    g500;
    getmax;
    get_sums;
    print_to_file;
    if also_ablate then {
      ablate_bulkhead;
      return_bulkhead;
      g500;
    };
    ie:=ie+1;
  };
}



//Commands for junction sweep

v_deformed:=3.975
setup
gotorest
fname:="p-v/v-0.txt"
v_exp:=(v_deformed-rest_vol)/4
v_deformed:=v_deformed-(v_deformed-rest_vol)/2
bulkheadyoungs:=0
gotodeformed
getmax
get_sums
print_to_file
expand

q 0

